{"version":3,"file":"static/js/605.977ec017.chunk.js","mappings":"gTAAaA,EACX,uJ,wCCoIF,EAlHiB,WAAO,IAAD,EACrB,GAAoDC,EAAAA,EAAAA,KAA5CC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,eACjC,GAA0BC,EAAAA,EAAAA,WAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEA,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,aALNC,EADF,EACEA,aACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,MAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,QAYvB,OACE,UAACC,EAAA,EAAD,CACEC,WAAY,EACZC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,eAAe,SALjB,WAOE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,SAASC,aAAc,EAA1D,SACGrB,EAAQ,WAAa,WAExB,UAACY,EAAA,EAAD,CACEU,SAAUhB,GAnBC,SAAC,GAAyB,IAAvBiB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACrBxB,EAAOJ,EAAa2B,EAAOC,GAC1B3B,EAAU0B,EAAOC,GAEtBhB,GACD,IAeKiB,UAAU,OACVX,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXU,SAAU,IANZ,WAQE,SAACC,EAAA,GAAD,kBACMpB,EAAS,QAAS,CACpBqB,SAAU,QACVC,QAAS,CACPC,MAAOpC,EACPqC,QAAS,+BALf,IAQEC,KAAK,QACLC,KAAK,QACLd,QAAQ,WACRe,MAAM,QACNC,MAAOzB,EAAOa,MAAQ,QAAU,UAChCa,WAAS,MAEJ,OAAN1B,QAAM,IAANA,OAAA,EAAAA,EAAQa,SACP,SAACL,EAAA,EAAD,CAAYC,QAAQ,UAAUgB,MAAM,QAAQf,UAAU,SAAtD,UACS,OAANV,QAAM,IAANA,GAAA,UAAAA,EAAQa,aAAR,eAAeQ,UAAW,YAI/B,UAACM,EAAA,EAAD,CAAalB,QAAQ,WAAWmB,GAAI,CAAEC,EAAG,EAAGC,MAAO,QAAnD,WACE,SAACC,EAAA,EAAD,CAAYN,MAAOzB,EAAOc,SAAW,QAAU,UAA/C,uBAGA,SAACkB,EAAA,GAAD,gBACEN,WAAS,GACL7B,EAAS,WAAY,CACvBqB,SAAU,WACVe,UAAW,CACTb,MAAO,EACPC,QAAS,mDANf,IASEE,KAAM/B,EAAe,OAAS,WAC9B0C,cACE,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM7C,GAAgB,SAAA8C,GAAI,OAAKA,CAAL,GAA1B,EAArB,SACG/C,GAAe,SAACgD,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,QAI1CjB,MAAM,WACNC,MAAOzB,EAAOc,SAAW,QAAU,aAEpCd,EAAOc,WACN,SAACN,EAAA,EAAD,CAAYC,QAAQ,UAAUgB,MAAM,QAAQf,UAAU,SAAtD,SACGV,EAAOc,SAASO,cAKvB,UAACqB,EAAA,EAAD,CAAQJ,QAASlD,EAAjB,WACE,SAACuD,EAAA,EAAD,CAAYC,UAAU,aACtB,SAACpC,EAAA,EAAD,CAAYiB,MAAM,UAAUoB,WAAY,EAAxC,6BAIF,SAACH,EAAA,EAAD,CACEnB,KAAK,SACLd,QAAQ,WACRqC,UAAW7C,EACX2B,GAAI,CAAEC,EAAG,GAJX,wBASF,SAACa,EAAA,EAAD,CAAQJ,QAAS,kBAAM/C,GAAUD,EAAhB,EAAwBsC,GAAI,CAAEmB,cAAe,QAA9D,SACGzD,EAAQ,SAAW,aAI3B,C","sources":["helpers/valid.email.js","pages/AuthPage.jsx"],"sourcesContent":["export const validEmail =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { VisibilityOff, Visibility } from '@mui/icons-material';\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\n\r\nimport { validEmail } from 'helpers/valid.email';\r\nimport React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useAuth } from '../firebase';\r\n\r\nconst AuthPage = () => {\r\n  const { registerUser, loginUser, authWithGoogle } = useAuth();\r\n  const [isReg, setIsReg] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    reset,\r\n    formState: { errors, isValid },\r\n  } = useForm({\r\n    mode: 'onChange',\r\n  });\r\n\r\n  const onSubmit = ({ email, password }) => {\r\n    if (isReg) registerUser(email, password);\r\n    else loginUser(email, password);\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      paddingTop={6}\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Typography variant=\"h4\" textAlign=\"center\" marginBottom={2}>\r\n        {isReg ? 'Register' : 'Login'}\r\n      </Typography>\r\n      <Box\r\n        onSubmit={handleSubmit(onSubmit)}\r\n        component=\"form\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        maxWidth={400}\r\n      >\r\n        <TextField\r\n          {...register('email', {\r\n            required: 'email',\r\n            pattern: {\r\n              value: validEmail,\r\n              message: 'Please enter valid email',\r\n            },\r\n          })}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          variant=\"outlined\"\r\n          label=\"Email\"\r\n          color={errors.email ? 'error' : 'primary'}\r\n          fullWidth\r\n        />\r\n        {errors?.email && (\r\n          <Typography variant=\"caption\" color=\"error\" textAlign=\"center\">\r\n            {errors?.email?.message || 'Error!'}\r\n          </Typography>\r\n        )}\r\n\r\n        <FormControl variant=\"outlined\" sx={{ m: 1, width: '100%' }}>\r\n          <InputLabel color={errors.password ? 'error' : 'primary'}>\r\n            password\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            fullWidth\r\n            {...register('password', {\r\n              required: 'password',\r\n              minLength: {\r\n                value: 6,\r\n                message: 'Password should be minimum 6 characters long',\r\n              },\r\n            })}\r\n            type={showPassword ? 'text' : 'password'}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(show => !show)}>\r\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            label=\"password\"\r\n            color={errors.password ? 'error' : 'primary'}\r\n          />\r\n          {errors.password && (\r\n            <Typography variant=\"caption\" color=\"error\" textAlign=\"center\">\r\n              {errors.password.message}\r\n            </Typography>\r\n          )}\r\n        </FormControl>\r\n\r\n        <Button onClick={authWithGoogle}>\r\n          <GoogleIcon htmlColor=\"#9b9797\" />\r\n          <Typography color=\"#9b9797\" marginLeft={1}>\r\n            with google\r\n          </Typography>\r\n        </Button>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"outlined\"\r\n          disabled={!isValid}\r\n          sx={{ m: 3 }}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n      <Button onClick={() => setIsReg(!isReg)} sx={{ textTransform: 'none' }}>\r\n        {isReg ? 'SignIn' : 'SignUp'}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["validEmail","useAuth","registerUser","loginUser","authWithGoogle","useState","isReg","setIsReg","showPassword","setShowPassword","useForm","mode","handleSubmit","register","reset","formState","errors","isValid","Box","paddingTop","display","flexDirection","alignItems","justifyContent","Typography","variant","textAlign","marginBottom","onSubmit","email","password","component","maxWidth","TextField","required","pattern","value","message","name","type","label","color","fullWidth","FormControl","sx","m","width","InputLabel","OutlinedInput","minLength","endAdornment","InputAdornment","position","IconButton","onClick","show","VisibilityOff","Visibility","Button","Google","htmlColor","marginLeft","disabled","textTransform"],"sourceRoot":""}